archetype voted_simple(owner: address) with metadata ""

constant INVALID_START_TIME: string = "INVALID START TIME"
constant INVALID_STOP_TIME: string = "INVALID STOP TIME"
constant INVALID_COST_PER_VOTE: string = "COST PER VOTE SHOULD BE GREATER THAN ZER0"
constant INVALID_CATEGORY: string = "CATEGORY DOES NOT EXIST"
constant INVALID_CANDIDATE: string = "CANDIDATE DOES NOT EXIST"
constant INVALID_CALLER: string = "CALLER IS UNAUTHORIZED"
constant INVALID_ELECTION: string = "ELECTION DOES NOT EXIST"
constant ELECTION_EXISTS: string = "ELECTION ALREADY EXISTS"
constant INVALID_PUB_KEY: string = "PUB KEY ALREADY EXISTS FOR ELECTION"
constant INVALID_PERIOD: string = "CANNOT INVOKE THIS FUNCTIONALITY AT THIS TIME"
constant INVALID_TOKEN: string = "INVALID TOKEN"
constant INVALID_TOKEN_DECODE: string = "INVALID TOKEN DECODE"
constant INVALID_VOTE: string = "INVALID VOTE"
constant INVALID_TOKEN_USED: string = "INVALID TOKEN USED"
constant DUPLICATE_CATEGORY: string = "CANNOT HAVE MORE THAT ONE VOTE PARAM IN SAME CATEGORY"
constant INSUFFICIENT_AMOUT: string = "INSUFFICIENT AMOUNT TO PAY FOR VOTE"
constant INVALID_VOTE_COUNT: string = "THERE ARE TOO MANY VOTES THAN ALLOWED"

enum ELECTION_VISIBILITY = | public | private

enum ELECTION_MODE = | free | paid

enum ELECTION_PERIOD = | pre | during | after

record category_param {
    category_title_param: string;
    category_description_param: string;
    category_vote_limit_param: nat;
}

record candidate_param {
    candidate_title_param: string;
    candidate_description_param: string;
    candidate_category_id_param: string;
}

record category {
    category_title: string;
    category_description: string;
    category_vote_limit: nat = 1;
    category_votes_count: nat = 0;
}

record candidate {
    candidate_title: string;
    candidate_description: string;
    candidate_category_id: string;
    candidate_votes_count: nat = 0;
}

record vote_param {
    vote_canditate_id: string;
    vote_category_id: string;
    number_of_votes: nat;
}

record vote {
    vote_election_id: string;
    vote_params: list<vote_param>;
    vote_token: option<bytes>;
}

record election_param {
    election_id_param : string;
    election_organizer_param: address;
    election_title_param: string;
    election_description_param: string;
    election_start_time_param: date;
    election_stop_time_param: date;
    election_pub_keys_param: set<key>;
    election_mode_param: ELECTION_MODE;
    election_cost_per_vote_param: tez;
    election_visibility_param: ELECTION_VISIBILITY;
    election_categories_param: map<string, category_param>;
    election_candidates_param: map<string, candidate_param>;
}

asset election_metadata identified by election_id to big_map {
    election_id : string;
    election_organizer: address;
    election_title: string;
    election_description: string;
    election_start_time: date;
    election_stop_time: date;
    election_pub_keys: set<key>;
    election_mode: ELECTION_MODE;
    election_cost_per_vote: tez = 0tz;
    election_visibility: ELECTION_VISIBILITY;
    election_categories: map<string, category>;
    election_candidates: map<string, candidate>;
    election_votes_count: nat = 0;
}

asset election_tokens_used identified by election to big_map {
    election : string;
    tokens_used: set<bytes> = [];
}

function validate_election(e: election_param): bool {
    do_require(e.election_start_time_param > now, INVALID_START_TIME);
    do_require(e.election_stop_time_param > e.election_start_time_param, INVALID_STOP_TIME);
    match e.election_mode_param with
    | paid -> do_require(e.election_cost_per_vote_param >= 0tz, INVALID_COST_PER_VOTE)
    | free -> do_require(e.election_cost_per_vote_param = 0tz, INVALID_COST_PER_VOTE)
    end;
    for (ck, cpv) in e.election_candidates_param do
        do_require(
            contains(e.election_categories_param, cpv.candidate_category_id_param),
            INVALID_CATEGORY
        )
    done;
    return true
}

function election_period(s: date, d: date): ELECTION_PERIOD {
    return (
      if now < s then pre
      else if s <= now <= d then during
      else after
    )
}

function is_pre_election(s: date, d: date): bool {
    return (election_period(s, d) = pre)
}

function is_during_election(s: date, d: date): bool {
    return (election_period(s, d) = during)
}

function build_category(c: map<string, category_param>): map<string, category> {
    var cat: map<string, category> = [];
    for (k, v) in c do
        cat.put(k, {
            category_title = v.category_title_param;
            category_description = v.category_description_param;
            category_vote_limit = v.category_vote_limit_param
        })
    done;
    return cat
}

function build_candidate(c: map<string, candidate_param>): map<string, candidate> {
    var can: map<string, candidate> = [];
    for (k, v) in c do
        can.put(k, {
            candidate_title = v.candidate_title_param;
            candidate_description = v.candidate_description_param;
            candidate_category_id = v.candidate_category_id_param
        })
    done;
    return can
}

entry create_election(e: election_param) {
    do_require(not election_metadata.contains(e.election_id_param), ELECTION_EXISTS);
    const params_valid = validate_election(e);
    election_metadata.add({
        election_id = e.election_id_param;
        election_organizer = e.election_organizer_param;
        election_title = e.election_title_param;
        election_description = e. election_description_param;
        election_start_time = e.election_start_time_param;
        election_stop_time = e.election_stop_time_param;
        election_pub_keys = e.election_pub_keys_param;
        election_mode = e.election_mode_param;
        election_cost_per_vote = e.election_cost_per_vote_param;
        election_visibility = e.election_visibility_param;
        election_categories  = build_category(e.election_categories_param);
        election_candidates  = build_candidate(e.election_candidates_param)
    });
    election_tokens_used.add({
        election = e.election_id_param
    })
}

entry update_election(e: election_param) {
    do_require(election_metadata.contains(e.election_id_param), INVALID_ELECTION);
    const params_valid = validate_election(e);
    do_require(caller = election_metadata[e.election_id_param].election_organizer, INVALID_CALLER);
    do_require(
        is_pre_election(
            election_metadata[e.election_id_param].election_start_time,
            election_metadata[e.election_id_param].election_stop_time
        ),
        INVALID_PERIOD
    );
    election_metadata.update(e.election_id_param,
    {
        election_organizer = e.election_organizer_param;
        election_title = e.election_title_param;
        election_description = e. election_description_param;
        election_start_time = e.election_start_time_param;
        election_stop_time = e.election_stop_time_param;
        election_pub_keys = e.election_pub_keys_param;
        election_mode = e.election_mode_param;
        election_cost_per_vote = e.election_cost_per_vote_param;
        election_visibility = e.election_visibility_param;
        election_categories  = build_category(e.election_categories_param);
        election_candidates  = build_candidate(e.election_candidates_param)
    })
} 

entry add_pub_key(e_id: string, pub_key: key) {
    require {
        r1: election_metadata.contains(e_id) otherwise INVALID_ELECTION;
        r2: caller = election_metadata[e_id].election_organizer otherwise INVALID_CALLER;
        r3: not election_metadata[e_id].election_pub_keys.contains(pub_key) otherwise INVALID_PUB_KEY;
        r4: is_pre_election(
                election_metadata[e_id].election_start_time,
                election_metadata[e_id].election_stop_time
            ) otherwise INVALID_PERIOD
    }

    effect {
        election_metadata[e_id].election_pub_keys.add(pub_key)
    }
}

function validate_token(epubs: set<key>, token: bytes): bool {
    const data_and_sig ?= unpack<bytes * signature>(token) : INVALID_TOKEN_DECODE;
    var is_token_valid = false;
    for pubk in epubs do
        is_token_valid |= check_signature(pubk, data_and_sig[1], data_and_sig[0])
    done;
    return is_token_valid
}

function validate_vote(k : asset_key<election_metadata>, e: asset_value<election_metadata>, t: bytes): bool {
    do_require(is_during_election(e.election_start_time, e.election_stop_time), INVALID_PERIOD);
    if e.election_visibility = private then begin
        do_require(validate_token(e.election_pub_keys, t), INVALID_TOKEN);
        do_fail_if(contains(election_tokens_used[k].tokens_used, t), INVALID_TOKEN_USED)
    end;
    return true
}

entry register_vote(v: vote) {
    var token: bytes = match v.vote_token with
    | some(t) -> t
    | none -> 0x00
    end;
    var e: asset_value<election_metadata> = [];
    const k = v.vote_election_id;
    match election_metadata[k] with
    | some(ve) -> if validate_vote(k, ve, token) then e := ve else fail(INVALID_VOTE)
    | none -> fail(INVALID_ELECTION) 
    end;
    var vote_limit_check: map<string, nat> = [];
    var vote_cost_check: tez = transferred;
    for vp in v.vote_params do
        do_require(contains(e.election_categories, vp.vote_category_id), INVALID_CATEGORY);
        do_require(contains(e.election_candidates, vp.vote_canditate_id), INVALID_CANDIDATE);
        const vote_cost = e.election_cost_per_vote * vp.number_of_votes;
        vote_cost_check -= vote_cost;
        if contains(vote_limit_check, vp.vote_category_id) then begin
            const votes_counted: nat ?= vote_limit_check[vp.vote_category_id] : INVALID_CATEGORY;
            const s: nat = votes_counted + vp.number_of_votes;
            vote_limit_check.update(
                vp.vote_category_id,
                some(s)
            )
        end else vote_limit_check.put(vp.vote_category_id, vp.number_of_votes);
        var e_cat : category ?= e.election_categories[vp.vote_category_id] : INVALID_CATEGORY;
        const total_vote_counts: nat ?= vote_limit_check[vp.vote_category_id] : INVALID_CATEGORY;
        do_fail_if(
            e_cat.category_vote_limit < total_vote_counts,
            INVALID_VOTE_COUNT
        );
        if e.election_mode = paid then do_require(vote_cost_check >= 0tz, INSUFFICIENT_AMOUT);
        var e_cand : candidate ?= e.election_candidates[vp.vote_canditate_id] : INVALID_CANDIDATE;
        e_cat.category_votes_count := total_vote_counts;
        e_cand.candidate_votes_count := e_cand.candidate_votes_count + vp.number_of_votes;
        election_metadata.update(v.vote_election_id, {
            election_votes_count += vp.number_of_votes;
            election_categories += [(vp.vote_category_id, e_cat)];
            election_candidates += [(vp.vote_canditate_id, e_cand)]
        });

    done;
    if election_metadata[v.vote_election_id].election_visibility = private then begin
        election_tokens_used[v.vote_election_id].tokens_used.add(token)
    end
}

/* OWNERSHIP TRANSFER ------------------------------------------------------- */

variable owner_candidate : option<address> = none

entry declare_ownership(new_candidate : address) {
  called by owner
  effect {
    owner_candidate := some(new_candidate);
  }
}

entry claim_ownership() {
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise INVALID_CALLER
  }
  effect {
    owner := caller;
    owner_candidate := none
  }
}

entry collect(collector : address) {
  called by owner
  effect {
    transfer balance to collector
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(k: string, d : option<bytes>) {
  called by owner
  effect {
    metadata.update(k, d)
  }
}
